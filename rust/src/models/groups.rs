//! `SeaORM` Entity. Generated by sea-orm-codegen 0.11.3

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "groups")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: Uuid,
    pub owner_id: Option<Uuid>,
    pub name: String,
    pub description: String,
    pub created_at: Option<DateTime>,
    pub is_public: Option<bool>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::invite_groups::Entity")]
    InviteGroups,
    #[sea_orm(has_many = "super::rooms::Entity")]
    Rooms,
    #[sea_orm(
        belongs_to = "super::users::Entity",
        from = "Column::OwnerId",
        to = "super::users::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Users,
    #[sea_orm(has_many = "super::users_groups::Entity")]
    UsersGroups,
}

impl Related<super::invite_groups::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::InviteGroups.def()
    }
}

impl Related<super::rooms::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Rooms.def()
    }
}

impl Related<super::users::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Users.def()
    }
}

impl Related<super::users_groups::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::UsersGroups.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
